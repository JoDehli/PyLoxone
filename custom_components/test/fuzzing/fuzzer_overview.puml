@startuml fuzzer_overview
allow_mixing

'Web server to creat UML:
' https://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000
' copy the UML and generate SVG

'''''''''''''''''''''''''''''''''''''''
'Fuzzer''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
abstract class "Fuzzer" as fuzzer << abstract class >> {
    --
    - __init__(self) : void
    + fuzz() : list
}
'''''''''''''''''''''''''''''''''''''''
class "ValuePoolFuzzer" as VPFuzzer << class >> {
    --
    - __init__(self) : void
    + fuzz(self, param_nr : int, types : list, param_combi : int) : list[list]
}
class "ValuePool" as VPool << class >> {
    - __UINT_POOL : list
    - __INT_POOL : list
    - __FLOAT_POOL : list
    - __STRING_POOL : list
    - __BOOL_POOL : list
    - __BYTE_POOL : list
    - __LIST_POOL : list
    - __DICT_POOL : list
    - __DATE_POOL : list
    - __ALL_VALUES_POOL : list
    --
    - __init__(self) : void
    + get_uint(self) : list
    + get_int(self) : list
    + get_float(self) : list
    + get_int(self) : list
    + get_uint(self) : list
    + get_float(self) : list
    + get_string(self) : list
    + get_bool(self) : list
    + get_byte(self) : list
    + get_list(self) : list
    + get_dict(self) : list
    + get_date(self) : list
    + get_all_values(self) : list
}
'''''''''''''''''''''''''''''''''''''''
class "GeneratorFuzzer" as GFuzzer << class >> {
    --
    - __init__(self) : void
    + fuzz(self, ???) : list
}
'''''''''''''''''''''''''''''''''''''''
class "CostGrammarType" as CGType << class >> {
    + MIN : int
    + MAX : int
    --
}
class "GrammarFuzzer" as GrFuzzer << class >> {
    - _NON_TERMINAL_REGEX = str
    --
    - __init__(self) : void
    - __convert_to_cost_grammar(self, grammar: Grammar, conversion_type: CostGrammarType) : tuple
    - __convert_to_trackable_grammar(self, grammar: Grammar) : tuple
    - __compose_min_cost(self, head: Element, given_cost_grammar: Annotated_Grammar) : str
    - __compose_max_cost(self, head: Element, given_cost_grammar: Annotated_Grammar, applications: int, max_applications: int): str
    - __is_grammar_covered(self, trackable_grammar: Annotated_Grammar, trackable_non_terminals: Annotated_Non_Terminals) : bool
    + fuzz_min_cost(self, grammar: Grammar, start_symbol: Element) : str
    + fuzz_max_cost( self, grammar: Grammar, start_symbol: Element, max_rule_applications: int) : str
    + fuzz_grammar_coverage(self, grammar: Grammar, start_symbol: Element) : list
}
entity "grammar_ipv4" as ipv4 << grammars >> {
    grammar_ipv4: Grammar
}
'''''''''''''''''''''''''''''''''''''''
class "MutationalFuzzer" as MFuzzer << class >> {
    --
    - __init__(self) : void
    - __delete_random_char(self, s: str) : str
    - __insert_random_char(self, s: str) : str
    - __flip_random_char(self, s: str) : str
    - __get_random_float(self) : float
    - __check_inf(self, number: float) : float
    - __add_random_number(self, number: float) : float
    - __sub_random_number(self, number: float) : float
    - __mult_random_number(self, number: float) : float
    - __div_random_number(self, number: float) : float
    + fuzz(self, seed: list, rounds: int = 1) : list[list]
    + fuzz_failed(self, seed: dict, rounds: int = 1) : list[list]
}
'''''''''''''''''''''''''''''''''''''''
'Runner''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
class "GreyBoxFuzzer" as GBFuzzer << class >> {
    - __RANGE_RANDOM_INT: int = 9
    - __RANGE_RANDOM_STRING: int = 100
    - __data_type_creator: DataTypeCreator
    --
    - __init__(self) : void
    + fuzz(self, seed_template: list, seed_specification,: list = None, amount_seeds: int = 100) : list[Seed]
}
'''''''''''''''''''''''''''''''''''''''
class "GreyBoxRunner" as GBRunner << class >> {
    - __seed_manager = SeedManager()
    - __mutator = Mutator()
    - __branch_dict = {}
    --
    - __init__(self) : void
    + run(self, function: Callable, seed_population: List[Seed], amount_runs: int = 10000) : list
    - __hash_md5(self, branch_covered: str) : str
    - __store_hashed_branch(self, hashed_branch: str) : void
}
'''''''''''''''''''''''''''''''''''''''
class "SeedManager" as SeedManager << class >> {
    - __power_energy: int = 2
    --
    - __init__(self) : void
    + select_seed(self, seed_population: List[Seed]) : Seed
    + adjust_energy(self, seed: Seed, branch_dict: dict, hashed_branch: str) : void
    + get_normalized_energy(self, seed_population: List[Seed]) : list
}
'''''''''''''''''''''''''''''''''''''''
class "Mutator" as Mutator << class >> {
    --
    - __init__(self) : void
    + mutate_grey_box_fuzzer(self, seed: Seed) : void
    - __delete_random_char(self, s: str) : str
    - __insert_random_char(self, s: str) : str
    - __flip_random_char(self, s: str) : str
    - __get_random_float(self) : float
    - __check_inf(self, number: float) : float
    - __add_random_number(self, number: float) : float
    - __sub_random_number(self, number: float) : float
    - __mult_random_number(self, number: float) : float
    - __div_random_number(self, number: float) : float
    - __grey_mutate_string(self, seed_value: str) : str
}
'''''''''''''''''''''''''''''''''''''''
class "Seed" as Seed << class >> {
    - energy: int = 0
    - seed_values: list = []
    --
    - __init__(self, energy: int = 0, seed_values: list = []) : void
}
'''''''''''''''''''''''''''''''''''''''
class "DataTypeCreator" as DataTypeCreator << class >> {
    - __MAX_INT: int = (1 << 31) - 1
    - __MAX_UINT = (1 << 32) - 1
    --
    - __init__(self) : void
    - create_int(self, amount_digits: int = 10, random_creation: bool = True) : int
    - create_uint(self, amount_digits: int = 10, random_creation: bool = True) : int
    - create_string_special_characters(self, amount_chars: int) : str
}
'''''''''''''''''''''''''''''''''''''''
abstract class "Runner" as runner << abstract class >> {
    --
    - __init__(self) : void
    + run() : int
}
'''''''''''''''''''''''''''''''''''''''
class "ParamRunner" as PRunner << class >> {
    --
    - __init__(self) : void
    + run(self, function : function, param_set : list) : dict
    + limit_param_set(self, param_set : list, runs : int) : list
}
'''''''''''''''''''''''''''''''''''''''
'Testcases'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
entity  "test_vp_on_helpers.py" as test_VP_H << test case >>{
    logger
    value_pool_fuzzer : ValuePoolFuzzer
    param_runner : ParamRunner
    --
    test_map_range() : None
    test_hass_to_lox() : None
    test_lox_to_hass() : None
    test_lox2lox_mapped() : None
    test_lox2hass_mapped() : None
    test_to_hass_color_temp() : None
    test_to_loxone_color_temp() : None
    test_get_room_name_from_room_uuid() : None
    test_get_cat_name_from_cat_uuid() : None
    test_add_room_and_cat_to_value_values() : None
    test_get_miniserver_type() : None
    test_get_all() : None
}
'''''''''''''''''''''''''''''''''''''''
entity  "test_gen_on_XXX.py" as test_GEN << test case >>{

}
'''''''''''''''''''''''''''''''''''''''
entity  "test_gram_on_XXX.py" as test_GRA << test case >>{

}
'''''''''''''''''''''''''''''''''''''''
entity  "test_mut_on_helpers.py" as test_MUT << test case >>{
    logger
    mutational_fuzzer : MutationalFuzzer
    grammar_fuzzer : GrammarFuzzer
    grammar_ipv4 : Grammar
    param_runner : ParamRunner
    --
    test_demo_get_param_set() : None
    test_map_range() : None
}
'''''''''''''''''''''''''''''''''''''''
entity  "test_grey_box_on_helpers.py" as test_GBox << test case >>{
    logger
    grey_box_fuzzer = GreyBoxFuzzer
    grey_box_runner = GreyBoxRunner
    --

}
'''''''''''''''''''''''''''''''''''''''
entity  "test_grey_box_on_helpers_complex.py" as test_GBox_complex << test case >>{
    logger
    grey_box_fuzzer = GreyBoxFuzzer
    grey_box_runner = GreyBoxRunner
    --
}
'''''''''''''''''''''''''''''''''''''''
'Fuzzer''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
fuzzer <|-- VPFuzzer : inherits from <
VPool <--* VPFuzzer: has access to <
'fuzzer <|-- GrFuzzer : inherits from <
fuzzer <|-- GFuzzer : inherits from <
fuzzer <|-- MFuzzer : inherits from <
GBFuzzer o-- DataTypeCreator : aggregates >
GBFuzzer --> Seed: uses >
'''''''''''''''''''''''''''''''''''''''
'Runner''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
runner <|-- PRunner : inherits from <
GBRunner o-- Mutator : aggregates >
GBRunner o-- SeedManager : aggregates >
GBRunner --> Seed: uses >
'''''''''''''''''''''''''''''''''''''''
'Other classes'''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
Mutator --> Seed: uses >
SeedManager --> Seed: uses >
DataTypeCreator --> Seed: uses >
'''''''''''''''''''''''''''''''''''''''
'Testcases'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
VPFuzzer <--* test_VP_H : needs a <
PRunner <--* test_VP_H : needs a <
'''''''''''''''''''''''''''''''''''''''
CGType <--* GrFuzzer : needs a <
GrFuzzer <--* test_GRA : needs a <
'PRunner <--* test_GRA : needs a <
test_GRA *-> ipv4: needs a >
'''''''''''''''''''''''''''''''''''''''
GFuzzer <--* test_GEN : needs a <
'''''''''''''''''''''''''''''''''''''''
MFuzzer "1"<--* test_MUT : needs a <
PRunner "1"<--* test_MUT : needs a <
GrFuzzer "1"<--* test_MUT : needs a <
ipv4 "1"<--* test_MUT : needs a <
'''''''''''''''''''''''''''''''''''''''
GBFuzzer "1"<--* test_GBox : needs a <
GBFuzzer "1"<--* test_GBox_complex : needs a <
GBRunner "1"<--* test_GBox : needs a <
GBRunner "1"<--* test_GBox_complex : needs a <
@enduml