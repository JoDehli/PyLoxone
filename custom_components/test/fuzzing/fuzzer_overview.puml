@startuml fuzzer_overview
allow_mixing
'''''''''''''''''''''''''''''''''''''''
'Fuzzer''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
abstract "Fuzzer" as fuzzer << abstract class >> {
    --
    - __int__(self) : void
    + fuzz() : boolean
}
'''''''''''''''''''''''''''''''''''''''
class "RandomFuzzer" as RFuzzer << class >>{
    --
    - __int__(self) : void
}
note "Not implemented!" as N2
RFuzzer .. N2
'''''''''''''''''''''''''''''''''''''''
class "ValuePoolFuzzer" as VPFuzzer << class >> {
    --
    - __int__(self) : void
    + fuzz(self, param_nr : int, types : list, param_combi : int) : list
    + limit_param_set(self, param_set : list, runs : int) : list
}
class "ValuePool" as VPool << class >> {
    - _UINT_POOL : list
    - _INT_POOL : list
    - _FLOAT_POOL : list
    - _STRING_POOL : list
    - _BOOL_POOL : list
    - _BYTE_POOL : list
    - _LIST_POOL : list
    - _DICT_POOL : list
    - _DATE_POOL : list
    - _ALL_VALUES_POOL : list
    --
    - __int__(self) : void
    + get_uint(self) : list
    + get_int(self) : list
    + get_float(self) : list
    + get_int(self) : list
    + get_uint(self) : list
    + get_float(self) : list
    + get_string(self) : list
    + get_bool(self) : list
    + get_byte(self) : list
    + get_list(self) : list
    + get_dict(self) : list
    + get_date(self) : list
    + get_all_values(self) : list
}
'''''''''''''''''''''''''''''''''''''''
class "GeneratorFuzzer" as GFuzzer << class >> {
    --
    - __int__(self) : void
}
'''''''''''''''''''''''''''''''''''''''
class "GrammarFuzzer" as GrFuzzer << class >> {
    --
    - __int__(self) : void
    - _convert_to_min_cost_grammar(self, grammar: Grammar) : Tuple
    - _convert_to_max_cost_grammar(self, grammar: Grammar) : Tuple
    + fuzz(self, grammar: Grammar, start_symbol: Element, min_prio: boolean) : list
}
class "GrammarPool" as GrPool << class >> {
     - _IPV4_GRAMMAR : dict
     - _dict_GRAMMAR : dict
    --
    - __int__(self) : void
    + get_ipv4(self) : dict
    + get_dict(self) : dict
}
'''''''''''''''''''''''''''''''''''''''
'Runner''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
abstract "Runner" as runner << abstract class >> {
    --
    - __int__(self) : void
    + run() : int
}
'''''''''''''''''''''''''''''''''''''''
class "ParamRunner" as PRunner << class >> {
    --
    - __int__(self) : void
    + run(self, function : function, param_set : list) : list
}
'''''''''''''''''''''''''''''''''''''''
class "GeneratorRunner" as GRunner << class >> {
    --
    - __int__(self) : void
    + run(self, ???) : list
}
'''''''''''''''''''''''''''''''''''''''
'Testcases'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
file "test_vp_on_helpers.py" as test_VP_H

file "test_gen_on_xxx.py" as test_GEN

file "test_gram_on_xxx.py" as test_GRA
'''''''''''''''''''''''''''''''''''''''
'Fuzzer''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
fuzzer <|-- VPFuzzer : inherits from <
fuzzer <|-- RFuzzer : inherits from <
fuzzer <|-- GrFuzzer : inherits from <
fuzzer <|-- GFuzzer : inherits from <
VPool <--* VPFuzzer: has access to <
'''''''''''''''''''''''''''''''''''''''
'Runner''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
runner <|-- PRunner : inherits from <
runner <|-- GRunner : inherits from <
'''''''''''''''''''''''''''''''''''''''
'Testcases'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''
VPFuzzer <--* test_VP_H : needs a <
PRunner <--* test_VP_H : needs a <
'''''''''''''''''''''''''''''''''''''''
GrFuzzer <--* test_GRA : needs a <
PRunner <--* test_GRA : needs a <
test_GRA *-> GrPool: needs a >
'''''''''''''''''''''''''''''''''''''''
GFuzzer <--* test_GEN : needs a <
GRunner <--* test_GEN : needs a <

@enduml